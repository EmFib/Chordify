import pymongo
import string
import warnings
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split


def get_phrase_for_chord(one_parsed_song):
    word_list = one_parsed_song['words']
    one_song_chord_phrase_tuples = []
    for chord_set in one_parsed_song['chord_idxs']:
        word_idx = chord_set[0]
        chord_name = chord_set[1]
        phrase = ' '.join(word_list[(word_idx - 8):(word_idx + 3)])
        one_song_chord_phrase_tuples.append((chord_name, phrase))
    return one_song_chord_phrase_tuples


def get_all_phrase_chord_tuples(parsed_songs):
    chord_phrase_tuples = []
    for song in parsed_songs:
        one_song_chord_phrase_tuples = get_phrase_for_chord(song)
        chord_phrase_tuples.extend(one_song_chord_phrase_tuples)
    return chord_phrase_tuples


def make_phrase_is_minor_list(chord_phrase_tuples):
    phrases = []
    chords = []
    is_minor = []
    for chord_phrase_tup in chord_phrase_tuples:
        phrases.append(chord_phrase_tup[1])
        chords.append(chord_phrase_tup[0])
        is_minor.append('m' in chord_phrase_tup[0])
    return phrases, chords, is_minor

good_chords = ['A', 'C', 'D', 'G']

def get_list_of_chords(chord_phrase_tuples):
    is_A = []
    is_C = []
    is_D = []
    is_G = []
    other_chord = []
    for tup in chord_phrase_tuples:
        is_A.append(tup[0] == 'A')
        is_C.append(tup[0] == 'C')
        is_D.append(tup[0] == 'D')
        is_G.append(tup[0] == 'G')
        other_chord.append(tup[0] not in good_chords)
    return is_A, is_C, is_D, is_G, other_chord


def make_phrase_chord_df(chord_phrase_tuples):
    phrases, chords, is_minor = make_phrase_is_minor_list(chord_phrase_tuples)
    is_A, is_C, is_D, is_G, other_chord = get_list_of_chords(chord_phrase_tuples)
    df = pd.DataFrame({
        'chords': chords,
        'A': is_A,
        'C': is_C,
        'D': is_D,
        'G': is_G,
        'other_chord': other_chord,
        'is_minor': is_minor,
        'words': phrases
    })
    return df

if __name__ == "__main__":

    mc = pymongo.MongoClient()
    db = mc['chordify']

    parsed_songs_db = db["parsed_songs"]
    parsed_songs = list(parsed_songs_db.find())[25:75]

    chord_phrase_tuples = get_all_phrase_chord_tuples(parsed_songs)
    df_chords = make_phrase_chord_df(chord_phrase_tuples)

    tfidf = TfidfVectorizer()
    logistic = LogisticRegression()



    words_train, words_test, is_minor_train, is_minor_test = train_test_split(df_chords['words'], df_chords['is_minor'])

    tfidf.fit(words_train)
    train_matrix = tfidf.transform(words_train)
    logistic.fit(train_matrix, is_minor_train)

    test_matrix = tfidf.transform(words_test)

    y_hat_log = logistic.predict_proba(test_matrix)
    is_minor_pred = logistic.predict(test_matrix)
    logistic_score = logistic.score(test_matrix, is_minor_test)
