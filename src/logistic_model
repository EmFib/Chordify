from selenium.webdriver import Chrome
from bs4 import BeautifulSoup
import pymongo
import datetime
import time
import pandas as pd
import re
import warnings
from sklearn.naive_bayes import BernoulliNB, MultinomialNB
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import string
from parse import *

mc = pymongo.MongoClient()
db = mc['chordify']
raw_html = db['raw_html']


html_docs = list(raw_html.find())


parsed_songs = parse_many(html_docs)


def get_all_lyrics_chords(song):
    song_lyrics = ' '.join(song[1])
    song_chords = []
    for ch_tup in song[0]:
        song_chords.append(ch_tup[1])
    return (song_lyrics, song_chords)


def make_song_dicts(parsed_songs):
    song_dict_list = []
    for song in parsed_songs:
        song_dict  = {}
        song_dict['lyrics'] = get_all_lyrics_chords(song)[0]
        song_dict['chords'] = get_all_lyrics_chords(song)[1]
        song_dict_list.append(song_dict)


def make_song_mats(song_dict_list):
    contains_minor = []
    lyrics_list = []
    for song_dict in song_dict_list:
        contains_minor.append(any('m' in chord for chord in song_dict['chords']))
        lyrics_list.append(song_dict['lyrics'])
    return contains_minor, lyrics_list


tfidf = TfidfVectorizer()
logistic = LogisticRegression()


tfidf.fit(lyrics_list_train)

train_matrix = tfidf.transform(lyrics_list_train)

logistic.fit(train_matrix, contains_minor_train)

test_matrix = tfidf.transform(lyrics_list_test)

logistic.predict_proba(test_matrix)
